<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Backpack\CRUD\app\Models\Traits\CrudTrait;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    use CrudTrait;
    use HasRoles;
    use HasApiTokens, HasFactory, Notifiable;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        if (auth()->check()) {
            static::creating(function ($model) {
                if (auth()->user()->isSuperAdmin == false) {
                    $model->business_id = auth()->user()['business_id'];
                }
            });
            static::addGlobalScope('checkBusinessId', function (Builder $builder) {
                if (auth()->check()) {
//                    return $builder->where('business_id', auth()->user()['business_id']);
                    if (auth()->user()->isSuperAdmin == false) {
                        return $builder->where('business_id', backpack_user()->business_id);
                    }
                    return $builder;
                }
            });
        }
    }


    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'username',
        'password',
        'isSuperAdmin',
        'business_id'
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
//        'email_verified_at' => 'datetime',
    ];


    public function inventoryLogs()
    {
        return $this->hasMany(InventoryLog::class);
    }

    public function supplierOrders()
    {
        return $this->hasMany(SupplierOrder::class);
    }

    public function business()
    {
        return $this->belongsTo(Business::class);
    }

    public function ownedBusiness()
    {
        return $this->hasOne(Business::class, 'admin_id');
    }
}
